<?php

namespace Controller;

use PDO;
use Src\Constants;
use Src\Utils;

class Contact extends BaseController {

	private string $table = 'contacts';

	public function checkAuth()
	{
		parent::checkAuth(); // TODO: Change the autogenerated stub
	}

	/**
	 * Get all contact
	 */
	public function getList()
	{
		$list = array();
		$reply = $this->request->getParameter('is_reply', '');
		try {
			$query = "SELECT * FROM $this->table";
			if ($reply !== '') {
				if(!in_array($reply, [Constants::NOT_REPLY, Constants::REPLIED])){
					$this->response->setContent(json_encode(array(
						'status' => Constants::RESPONSE_STATUS_FAIL,
						'data' => [],
						'message' => 'Contact reply is incorrect'
					), JSON_PRETTY_PRINT));
					return;
				}
				$query .= " WHERE is_reply=$reply";
			}
			$stmt = $this->pdo->prepare($query);
			$stmt->execute();
			$list = $stmt->fetchAll();
		} catch (\Exception $exception) {
			parent::setStatusMessages(
				Constants::RESPONSE_STATUS_FAIL,
				'Failed to get contact'
			);
		}

		$result = json_encode(array(
			'status' => $this->status,
			'data' => $list,
			'message' => $this->message
		), JSON_PRETTY_PRINT);

		$this->response->setContent($result);
	}

	/**
	 * Get detail contact
	 * @param $params
	 */
	public function getDetail($params)
	{
		$id = $params['id'] ?? '';
		$result = [];

		if (empty($id)) {
			$this->response->setContent(json_encode(array(
				'status' => Constants::RESPONSE_STATUS_FAIL,
				'data' => [],
				'message' => 'Id is required'
			), JSON_PRETTY_PRINT));
			return;
		}

		try {
			$result = self::findById($id);
			if (!$result) {
				$result = [];
				parent::setStatusMessages(
					Constants::RESPONSE_STATUS_FAIL,
					'Contact not found'
				);
			}
		} catch (\Exception $e) {
			parent::setStatusMessages(
				Constants::RESPONSE_STATUS_FAIL,
				$e->getMessage()
			);
		}

		$content = json_encode(array(
			'status' => $this->status,
			'data' => $result,
			'message' => $this->message
		), JSON_PRETTY_PRINT);

		$this->response->setContent($content);
	}

	/**
	 * Add new contact
	 */
	public function create()
	{
		$rawBody = $this->request->getRawBody();
		$params = json_decode($rawBody, true);

		// validate params
		$validate = $this->validate($params);
		if (isset($validate) && count($validate) > 0) {
			$this->response->setContent(json_encode(
				array(
					'status' => Constants::RESPONSE_STATUS_FAIL,
					'data' => [],
					'message' => $validate
				), JSON_PRETTY_PRINT));
			return;
		}

		// create contact
		try {
			$name = $params['name'];
			$phone = $params['phone'];
			$address = $params['address'];
			$email = $params['email'] ?? '';
			$content = $params['content'];
			$reply = $params['is_reply'] ?? Constants::NOT_REPLY;
			$currentDate = date("Y-m-d H:i:s");

			// insert contact
			$insertContactQuery = "
                INSERT INTO $this->table (name, phone, address, email, content, is_reply, created_date, updated_date)
					VALUES ('$name', '$phone', '$address',  '$email', '$content', '$reply', '$currentDate', '$currentDate');
            ";
			$stmt = $this->pdo->prepare($insertContactQuery);
			$stmt->execute();
		} catch (\Exception $exception) {
			parent::setStatusMessages(
				Constants::RESPONSE_STATUS_FAIL,
				$exception->getMessage()
			);
		}

		$result = json_encode(array(
			'status' => $this->status,
			'data' => [],
			'message' => $this->message
		), JSON_PRETTY_PRINT);
		$this->response->setContent($result);
	}

	/**
	 * Update a contact
	 */
	public function update()
	{
		$rawBody = $this->request->getRawBody();
		$params = json_decode($rawBody, true);
		$contactId = $params['id'] ?? '';

		// validate isset id
		if (empty($contactId)) {
			$this->response->setContent(json_encode(array(
				'status' => Constants::RESPONSE_STATUS_FAIL,
				'data' => [],
				'message' => 'Id is required'
			), JSON_PRETTY_PRINT));
			return;
		}

		// validate exist contact
		$contact = self::findById($contactId);
		if (!$contact) {
			$this->response->setContent(json_encode(array(
				'status' => Constants::RESPONSE_STATUS_FAIL,
				'data' => [],
				'message' => 'Contact not exist'
			), JSON_PRETTY_PRINT));
			return;
		}

		// update contact
		try {
			$name = $params['name'] ?? $contact['name'];
			$phone = $params['phone'] ?? $contact['phone'];
			$address = $params['address'] ?? $contact['address'];
			$email = $params['email'] ?? $contact['email'];
			$content = $params['content'] ?? $contact['content'];
			$reply = $params['is_reply'] ?? $contact['is_reply'];

			// validate show on screen
			if (isset($params['is_reply'])) {
				if (!in_array($params['is_reply'],
					array(Constants::NOT_REPLY, Constants::REPLIED))) {
					$this->response->setContent(json_encode(array(
						'status' => Constants::RESPONSE_STATUS_FAIL,
						'data' => [],
						'message' => 'Reply is wrong'
					), JSON_PRETTY_PRINT));
					return;
				}
			}

			$updated_date = date("Y-m-d H:i:s");
			$query = "
                UPDATE $this->table
                SET name= :name,
                    phone= :phone,
                    address= :address,
                    email= :email,
                    content= :content,
                    is_reply= :is_reply,
                    updated_date= :updated_date
                WHERE id= :id
            ";
			$stmt = $this->pdo->prepare($query);
			// assign params
			$stmt->bindParam(':id', $contactId);
			$stmt->bindParam(':name', $name);
			$stmt->bindParam(':phone', $phone);
			$stmt->bindParam(':address', $address);
			$stmt->bindParam(':email', $email);
			$stmt->bindParam(':content', $content);
			$stmt->bindParam(':is_reply', $reply);
			$stmt->bindParam(':updated_date', $updated_date);
			// exec update query
			$stmt->execute();
		} catch (\Exception $exception) {
			parent::setStatusMessages(Constants::RESPONSE_STATUS_FAIL, $exception->getMessage());
		}

		$result = json_encode(array(
			'status' => $this->status,
			'data' => $contactId,
			'message' => $this->message
		), JSON_PRETTY_PRINT);
		$this->response->setContent($result);
	}

	/**
	 * Delete a contact
	 */
	public function delete()
	{
		$rawBody = $this->request->getRawBody();
		$params = json_decode($rawBody, true);
		$contactId = $params['id'] ?? '';

		// validate isset id
		if (empty($contactId)) {
			$this->response->setContent(json_encode(array(
				'status' => Constants::RESPONSE_STATUS_FAIL,
				'data' => [],
				'message' => 'Id is required'
			), JSON_PRETTY_PRINT));
			return;
		}

		// validate exist contact
		$contact = self::findById($contactId);
		if (!$contact) {
			$this->response->setContent(json_encode(array(
				'status' => Constants::RESPONSE_STATUS_FAIL,
				'data' => [],
				'message' => 'Contact not exist'
			), JSON_PRETTY_PRINT));
			return;
		}

		// delete contact
		try {
			$query = "
				DELETE FROM $this->table
				WHERE id= :id
			";
			$stmt = $this->pdo->prepare($query);
			$stmt->bindParam(':id', $contactId, PDO::PARAM_INT);
			$stmt->execute();
		} catch (\Exception $e) {
			parent::setStatusMessages(Constants::RESPONSE_STATUS_FAIL, $e->getMessage());
		}

		$result = json_encode(array(
			'status' => $this->status,
			'data' => [],
			'message' => $this->message
		), JSON_PRETTY_PRINT);
		$this->response->setContent($result);
	}

	/**
	 * Find contact by id
	 * @param $id int
	 * @return false | object contact
	 */
	public function findById(int $id)
	{
		$query = "SELECT * FROM $this->table WHERE id= :id";
		$stmt = $this->pdo->prepare($query);
		$stmt->bindParam(':id', $id, PDO::PARAM_INT);
		$stmt->execute();
		return $stmt->fetch(PDO::FETCH_ASSOC);
	}

	private function validate(array $params): array
	{
		$err = array();

		// name
		if (empty($params['name'])) {
			$err['name'] = "Name is required";
		}

		// phone
		if (empty($params['phone'])) {
			$err['phone'] = "Phone number is required";
		}

		// address
		if (empty($params['address'])) {
			$err['address'] = "Address is required";
		}

		// email
		if (isset($params['email']) && !Utils::isValidEmail($params['email'])) {
			$err['email'] = "Email is invalid";
		}

		// content
		if (empty($params['content'])) {
			$err['content'] = "Content is required";
		}

		return $err;
	}


}
